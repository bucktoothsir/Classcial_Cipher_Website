# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  # the first job build
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
          
      - name: Install dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          
      - name: Install plugin
        run: |
          pip install -r requirements.txt
          pip install pytest-github-actions-annotate-failures
          pip install wemake-python-styleguide
          
      - name: Test with pytest
        run: pytest
        
      - name: Wemake Python Stylguide
        uses: wemake-services/wemake-python-styleguide@0.16.0
        continue-on-error: true
        with:
          reporter: 'github-pr-review'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # the second job to run change detection
  changes:
    needs: build
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'Pipfile*'
            - 'zappa_settings.json'
          frontend:
            - 'frontend/**'
            
  # JOB to deploy backend on AWS LAMBDA
  backend:
    needs: changes
    runs-on: macos-latest
    if: ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
          
      - name: Install dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          
      - name: Install plugin
        run: |
          pip install pipenv
          pip install zappa
          pip install aws-psycopg2
          
      - name: Cache pipenv virtualenv
        id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Configure AWS profile
        run: |
          pipenv run aws configure set region us-east-1 --profile default
          pipenv run aws configure set output json --profile default
          pipenv run aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile default
          pipenv run aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile default
          
      - name: Initialize virtual environment
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          cd backend
          pipenv install
          pipenv run pip install -r requirements.txt
    
      - name: Zappa deployments
        run: |
          cd backend
          pipenv run zappa update production
        
